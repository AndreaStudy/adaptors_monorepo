'use client';
import { Button } from '@repo/ui/components/ui/button';
import { Card, CardContent } from '@repo/ui/components/ui/card';
import { Input } from '@repo/ui/components/ui/input';
import { useEffect, useState } from 'react';
import { FormValues, TimeSlot } from './AutoGeneratedMetoringForm';
import SelectedTimes from './SelectedTimes';
export const DAYS_OF_WEEK = [
  'Monday',
  'Tuesday',
  'Wednesday',
  'Thursday',
  'Friday',
  'Saturday',
  'Sunday',
];
export default function WeeklyTimeSlotSelector({
  formValues,
  handleTimeSlotChange,
}: {
  formValues: FormValues;
  handleTimeSlotChange: (updatedTimeSlots: Record<string, TimeSlot[]>) => void;
}) {
  const [currentDay, setCurrentDay] = useState(DAYS_OF_WEEK[0]);
  const [startTime, setStartTime] = useState('');
  const [endTime, setEndTime] = useState('');
  const [now, setNow] = useState('');
  //타임슬롯 추가

  const addTimeSlot = () => {
    setNow('setNow 실행됨');
    if (!startTime || !endTime) {
      alert('시작 시간과 종료 시간을 모두 입력해주세요.');
      return;
    }

    if (startTime === endTime) {
      alert('시작 시간과 종료 시간이 같을 수 없습니다.');
      return;
    }

    if (startTime > endTime) {
      alert('시작 시간은 종료 시간보다 이전이어야 합니다.');
      return;
    }

    const newSlot = { start: startTime, end: endTime };
    const currentSlots = formValues?.timeSlots[currentDay] || [];

    const hasOverlap = currentSlots.some(
      (slot) =>
        (newSlot.start >= slot.start && newSlot.start < slot.end) ||
        (newSlot.end > slot.start && newSlot.end <= slot.end) ||
        (newSlot.start <= slot.start && newSlot.end >= slot.end)
    );

    if (hasOverlap) {
      alert('겹치는 시간이 있습니다. 다른 시간대를 선택해주세요.');
      return;
    }

    const updatedTimeSlots = {
      ...formValues?.timeSlots,
      [currentDay]: [...currentSlots, newSlot].sort((a, b) =>
        a.start.localeCompare(b.start)
      ),
    };
    // handleTimeSlotChange(updatedTimeSlots);

    // setStartTime('');
    // setEndTime('');
    console.log('실행됨');
  };

  const removeTimeSlot = (day: string, index: number) => {
    const updatedSlots = {
      ...formValues?.timeSlots,
      [day]: formValues?.timeSlots[day].filter((_, i) => i !== index),
    };

    handleTimeSlotChange(updatedSlots);
  };
  useEffect(() => {
    console.log('addTimeSlot 실행');
  }, [now]);

  return (
    <div className="container mx-auto py-4">
      <h1 className="text-2xl font-bold mb-6">
        세션을 생성할 요일, 시간을 선택해주세요
      </h1>
      <div className="flex flex-col lg:flex-row gap-6">
        <Card className="w-full lg:w-1/2 py-10">
          <CardContent>
            <div className="space-y-4">
              <div className="space-y-2">
                <label htmlFor="day-select">요일</label>
                <select
                  id="day-select"
                  className="w-full p-2 border rounded-md"
                  value={currentDay}
                  onChange={(e) => setCurrentDay(e.target.value)}
                >
                  {DAYS_OF_WEEK.map((day) => (
                    <option key={day} value={day}>
                      {day}
                    </option>
                  ))}
                </select>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label htmlFor="start-time">시작시간</label>
                  <Input
                    id="start-time"
                    type="time"
                    value={startTime}
                    onChange={(e) => setStartTime(e.target.value)}
                    style={{ fontSize: '1rem' }}
                  />
                </div>
                <div className="space-y-2">
                  <label htmlFor="end-time">종료시간</label>
                  <Input
                    id="end-time"
                    type="time"
                    value={endTime}
                    onChange={(e) => setEndTime(e.target.value)}
                    style={{ fontSize: '1rem' }}
                  />
                </div>
              </div>
              <Button onClick={addTimeSlot} className="w-full text-xl">
                세션 추가하기
              </Button>
            </div>
          </CardContent>
        </Card>

        <SelectedTimes
          schedule={formValues?.timeSlots}
          removeTimeSlot={removeTimeSlot}
        />
      </div>
    </div>
  );
}
